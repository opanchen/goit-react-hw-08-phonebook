{"version":3,"file":"static/js/295.b47efb18.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Modal/Modal.module.css?28d7","components/Modal/Modal.jsx","webpack://react-homework-template/./src/components/EditContactForm/EditContactForm.module.css?43d2","components/EditContactForm/EditContactForm.jsx","webpack://react-homework-template/./src/components/ContactListItem/ContactListItem.module.css?7127","components/ContactListItem/ContactListItem.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/Loader/Loader.module.css?d03f","components/Loader/Loader.jsx","webpack://react-homework-template/./src/components/Error/Error.module.css?141d","components/Error/Error.jsx","webpack://react-homework-template/./src/pages/Contacts/Contacts.module.css?fb9d","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = (state) => state.contacts.items;\nexport const selectIsLoading = (state) => state.contacts.isLoading;\nexport const selectError = (state) => state.contacts.error;\n\nexport const selectFilterValue = (state) => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n    [selectContacts, selectFilterValue],\n    (contacts, filter) => {\n        const normalizedFilter = filter.toLowerCase();\n        return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n    }\n);","// extracted by mini-css-extract-plugin\nexport default {\"contact-form\":\"ContactForm_contact-form__1+2ej\",\"buttons-bar\":\"ContactForm_buttons-bar__F9FuH\",\"disabled\":\"ContactForm_disabled__XBn+S\"};","import { useState } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from \"redux/contacts/operations\";\nimport { nanoid } from 'nanoid';\nimport { toast } from \"react-toastify\";\nimport css from './ContactForm.module.css';\nimport { ClearIcon } from \"helpers/icons\";\n\nexport const ContactForm = () => {\n\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const dispatch = useDispatch();\n    \n    const contacs = useSelector(selectContacts); \n\n    const nameInputId = nanoid();\n    const numberInputId = nanoid();\n\n    const checkContactName = (query) => {\n        return contacs.some(({name}) => name.toLowerCase() === query.toLowerCase())\n    }\n\n   const handleChange = (e) => {\n        const {name: inputName, value} = e.currentTarget;\n\n        switch (inputName) {\n            case 'name':\n                setName(value);\n                break;\n            case 'number':\n                setNumber(value);\n                break;\n            default:\n                console.log(`Error: there isn't ${name} input for value ${value}. Check form markup.`);\n            return\n        }\n    }\n\n   const handleSubmit = (e) => {\n        e.preventDefault();\n        \n        if (checkContactName(name)) {\n            toast.error(`${name} is already in contacts.`)\n            return\n        } // we leave to user an opportunity to change name without default reset\n\n        dispatch(addContact({name, number}))\n          \n        reset();\n    }\n\n    const reset = () => {\n        setName('');\n        setNumber('');\n    }\n\n    return(\n        <form className={css['contact-form']} autoComplete=\"off\" onSubmit={handleSubmit}>\n\n        <label htmlFor={nameInputId}>\n          Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          id={nameInputId}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={handleChange}\n          value={name}\n          />\n        </label>\n  \n        <label htmlFor={numberInputId}>\n          Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          id={numberInputId}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={handleChange}\n          value={number}\n        />\n        </label>\n\n        <div className={css['buttons-bar']}>\n        <button type=\"submit\">Add contact</button>\n        <button type=\"button\" \n            onClick={reset}\n            disabled={!name && !number}\n            className={!name && !number ? css.disabled : undefined}\n            >\n            Clear\n            <ClearIcon size={24}/>\n        </button>\n        </div>\n\n        </form>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"overlay\":\"Modal_overlay__r63M6\",\"modal\":\"Modal_modal__DJDMv\",\"btn-close\":\"Modal_btn-close__wlubt\"};","import { useEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { CloseIcon } from 'helpers/icons';\nimport PropTypes from 'prop-types';\nimport css from './Modal.module.css';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const Modal = ({onClose, children}) => {\n\n    useEffect(() => {\n        const handleKeyDown = (e) => {\n            if (e.code === 'Escape') onClose();\n        };\n\n        window.addEventListener('keydown', handleKeyDown);\n\n        return () => {\n            window.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [onClose])\n\n\n\n    const handleBackdropClick = (e) => {\n        if (e.currentTarget === e.target) onClose();\n    }\n\n    return createPortal(\n        <div className={css.overlay} onClick={handleBackdropClick}>\n            <div className={css.modal}>\n                { children }\n                <button type='button' onClick={() => onClose()} className={css['btn-close']}>\n                <CloseIcon size={24}/>\n                </button>\n            </div>\n        </div>, modalRoot\n    )\n}\n\nModal.propTypes = {\n    children: PropTypes.node,\n    onClose: PropTypes.func.isRequired,\n}","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"EditContactForm_wrapper__bVmYu\",\"avatar\":\"EditContactForm_avatar__xR-Z7\",\"contact-form\":\"EditContactForm_contact-form__YHbFG\",\"form-title\":\"EditContactForm_form-title__iFOas\",\"buttons-bar\":\"EditContactForm_buttons-bar__A2E3H\",\"disabled\":\"EditContactForm_disabled__N+J+O\"};","import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nimport { editContact } from 'redux/contacts/operations';\nimport { selectContacts } from \"redux/contacts/selectors\";\nimport { ClearIcon } from 'helpers/icons';\nimport css from './EditContactForm.module.css';\nimport PropTypes from 'prop-types';\n\nexport const EditContactForm = ({id, prevName, prevNumber, closeModal, avatar}) => {\n\n    const [name, setName] = useState(prevName);\n    const [number, setNumber] = useState(prevNumber);\n\n\n    const dispatch = useDispatch();\n    \n    const contacs = useSelector(selectContacts); \n\n\n    const nameInputId = nanoid();\n    const numberInputId = nanoid();\n\n    const checkContactName = (query) => {\n        return contacs\n        .filter((item) => item.id !== id)\n        .some(({name}) => name.toLowerCase() === query.toLowerCase())\n    }\n\n   const handleChange = (e) => {\n        const {name: inputName, value} = e.currentTarget;\n\n        switch (inputName) {\n            case 'name':\n                setName(value);\n                break;\n            case 'number':\n                setNumber(value);\n                break;\n            default:\n                console.log(`Error: there isn't ${name} input for value ${value}. Check form markup.`);\n            return\n        }\n    }\n\n   const handleSubmit = (e) => {\n        e.preventDefault();\n        \n        if (checkContactName(name)) {\n            toast.error(`${name} is already in contacts.`)\n            return\n        } // we leave to user an opportunity to change name without default reset\n\n        dispatch(editContact({id, name, number}))\n          \n        reset();\n        closeModal();\n    }\n\n    const reset = () => {\n        setName('');\n        setNumber('');\n    }\n\n    return(\n        <div className={css.wrapper}>\n            <img src={avatar} className={css.avatar} alt=\"contact's avatar\" width={80}/>\n            <form className={css['contact-form']} autoComplete=\"off\" onSubmit={handleSubmit}>\n                <p className={css['form-title']}>Edit contact:</p>\n            <label htmlFor={nameInputId}>\n            Name\n            <input\n            type=\"text\"\n            name=\"name\"\n            id={nameInputId}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            onChange={handleChange}\n            value={name}\n            />\n            </label>\n    \n            <label htmlFor={numberInputId}>\n            Number\n            <input\n            type=\"tel\"\n            name=\"number\"\n            id={numberInputId}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            onChange={handleChange}\n            value={number}\n            />\n            </label>\n\n            <div className={css['buttons-bar']}>\n            <button type=\"submit\">Save</button>\n            <button type=\"button\" \n                onClick={reset}\n                disabled={!name && !number}\n                className={!name && !number ? css.disabled : undefined}\n                >\n                Clear\n                <ClearIcon size={24}/>\n            </button>\n            </div>\n\n            </form>\n        </div>\n    )\n}\n\nEditContactForm.propTypes = {\n    id: PropTypes.string.isRequired,\n    prevName: PropTypes.string.isRequired,\n    closeModal: PropTypes.func.isRequired,\n    avatar: PropTypes.string.isRequired,\n}","// extracted by mini-css-extract-plugin\nexport default {\"contact-item\":\"ContactListItem_contact-item__o0gon\",\"avatar\":\"ContactListItem_avatar__cNInG\",\"contact-text\":\"ContactListItem_contact-text__lM+Pf\",\"contact-name\":\"ContactListItem_contact-name__cpENy\",\"buttons-bar\":\"ContactListItem_buttons-bar__kW+0p\",\"delete-btn\":\"ContactListItem_delete-btn__GM9hb\",\"edit-btn\":\"ContactListItem_edit-btn__jIf12\",\"btn-label\":\"ContactListItem_btn-label__SDiMJ\",\"disabled\":\"ContactListItem_disabled__RIGiL\"};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Modal } from 'components/Modal/Modal';\nimport { EditContactForm } from 'components/EditContactForm/EditContactForm';\nimport { EditIcon, DeleteIcon } from 'helpers/icons';\nimport { fakeImgAPI } from 'helpers/fakeImgAPI';\nimport css from './ContactListItem.module.css';\nimport PropTypes from 'prop-types';\n\n\nexport const ContactListItem = ({id, name, number}) => {\n\n    const [isModalOpen, setIsModalOpen] = useState(false);\n\n    const dispatch = useDispatch();\n\n    const handleDeleteContact = (id) => {\n        dispatch(deleteContact(id));\n    }\n\n    const toggleModal = () => {\n        setIsModalOpen((prevModalState) => !prevModalState)\n    }\n\n    const imgPath = fakeImgAPI.getImgById(id);\n\n    return (\n        <li className={css['contact-item']} >\n            <img src={imgPath} className={css.avatar} alt=\"random animal\" width={48}/>\n            <p className={css['contact-text']}>\n            <span className={css['contact-name']}>{name}:</span> {number}\n            </p>\n            <div className={css['buttons-bar']}>\n                <button type=\"button\" className={css['edit-btn']} onClick={toggleModal}>\n                   <span className={css['btn-label']}>Edit</span>\n                    <EditIcon size={24} className={css['icon-edit']}/>\n                </button>\n                <button className={css['delete-btn']}\n                type=\"button\" \n                onClick={() => handleDeleteContact(id)}\n                >\n                    <span className={css['btn-label']}>Delete</span>\n                    <DeleteIcon size={24} className={css['icon-del']}/>\n                </button>\n            </div>\n\n            {isModalOpen && <Modal\n                onClose={toggleModal}>\n                    <EditContactForm\n                        id={id}\n                        prevName={name}\n                        prevNumber={number}\n                        closeModal={toggleModal}\n                        avatar={imgPath}\n                    />  \n            </Modal>}\n        </li>\n\n    )\n}\n\nContactListItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n}","// extracted by mini-css-extract-plugin\nexport default {\"contact-list\":\"ContactList_contact-list__GnW-D\"};","import { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { ContactListItem } from 'components/ContactListItem/ContactListItem';\nimport css from './ContactList.module.css';\n\nexport const ContactList = () => {\n\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ul className={css['contact-list']}>\n        {visibleContacts.map((contact) => {\n        const {name, number, id} = contact;\n        return (\n\n          <ContactListItem\n            key={id}\n            id={id}\n            name={name}\n            number={number}\n          />\n      )}\n      )}\n    </ul>\n  )\n}","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { selectFilterValue } from 'redux/contacts/selectors';\nimport { update } from 'redux/contacts/filterSlice';\nimport css from './Filter.module.css';\n\nexport const Filter = () => {\n\n    const dispatch = useDispatch();\n\n    const filter = useSelector(selectFilterValue);\n\n    const changeFilter = (e) => {\n        dispatch(update(e.currentTarget.value));\n    }\n\n    return (\n        <label className={css.filter}>\n        Find contact by name\n          <input \n          type=\"text\" \n          value={filter}\n          onChange={changeFilter}\n          />\n        </label>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"loader\":\"Loader_loader__+lRPl\",\"loader-text\":\"Loader_loader-text__DZQo8\",\"icon-spin\":\"Loader_icon-spin__CrunX\"};","import {ImSpinner3} from \"react-icons/im\";\nimport css from \"./Loader.module.css\";\n\nexport const Loader = () => {\n    return (\n        <div className={css.loader}>\n            <ImSpinner3 size={16} className={css['icon-spin']}/> \n            <span className={css['loader-text']}>Loading...</span>\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"Error_error__9uczQ\",\"icon\":\"Error_icon__qD3vi\",\"title\":\"Error_title__WNFwj\"};","import { MdErrorOutline }from 'react-icons/md';\nimport css from './Error.module.css';\n\nexport const Error = ({message}) => {\n\n    return (\n        <div className={css.error} >\n            <MdErrorOutline size={32}className={css.icon}/> \n            <div className={css.text}>\n                <p className={css.title}>{message}</p>\n                <p className={css.subtitle}>Something went wrong... Please try again later.</p>\n            </div>\n        </div>\n    )\n}\n\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Contacts_wrapper__s7EJR\",\"inner\":\"Contacts_inner__4sMNZ\"};","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { selectError, selectIsLoading } from \"redux/contacts/selectors\";\nimport { ContactForm, ContactList, Error, Filter, Loader } from \"components\"\nimport { Helmet } from \"react-helmet\"\nimport css from './Contacts.module.css';\n\n\nconst Contacts = () => {\n\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  \n\n  useEffect(() => {\n\n    dispatch(fetchContacts());\n    \n  }, [dispatch]);\n\n    return (\n        <>\n            <Helmet>\n                <title>Your contacts</title>\n            </Helmet>\n\n          <div className={css.wrapper}>\n            <h1 className=\"visually-hidden\">Phonebook</h1>   \n            <div className={css.inner}>\n              <h2>Add new contact</h2>   \n              <ContactForm />\n            </div>\n\n            <div className={css.inner}>\n              <h2>Contacts</h2>\n                <Filter />\n\n                {error && <Error message={error}/>}\n                {isLoading && !error && <Loader />}\n\n                <ContactList />\n            </div>\n          </div>\n        </>\n    )\n}\n\nexport default Contacts;"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilterValue","filter","selectVisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","ContactForm","useState","setName","number","setNumber","dispatch","useDispatch","contacs","useSelector","nameInputId","nanoid","numberInputId","handleChange","e","currentTarget","inputName","value","console","log","reset","className","css","autoComplete","onSubmit","query","preventDefault","some","toast","addContact","htmlFor","type","id","pattern","title","required","onChange","onClick","disabled","undefined","size","modalRoot","document","querySelector","Modal","onClose","children","useEffect","handleKeyDown","code","window","addEventListener","removeEventListener","createPortal","target","EditContactForm","prevName","prevNumber","closeModal","avatar","src","alt","width","item","editContact","ContactListItem","isModalOpen","setIsModalOpen","toggleModal","prevModalState","imgPath","fakeImgAPI","deleteContact","handleDeleteContact","ContactList","visibleContacts","map","Filter","update","Loader","Error","message","fetchContacts","Helmet"],"sourceRoot":""}